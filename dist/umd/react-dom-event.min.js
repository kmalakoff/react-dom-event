!(function (e, t) {
  "object" == typeof exports && "undefined" != typeof module
    ? t(exports, require("react"))
    : "function" == typeof define && define.amd
      ? define(["exports", "react"], t)
      : t(
          ((e =
            "undefined" != typeof globalThis
              ? globalThis
              : e || self).reactDomEvent = {}),
          e.React,
        );
})(this, function (e, t) {
  "use strict";
  var n = t.createContext(void 0);
  (e.EventContext = n),
    (e.EventProvider = function (e) {
      var r = e.events,
        o = void 0 === r ? ["click"] : r,
        i = e.children,
        u = t.useState([])[0];
      function c(e) {
        u.forEach(function (t) {
          return t(e);
        });
      }
      return (
        t.useEffect(function () {
          return (
            o.forEach(function (e) {
              return window.document.addEventListener(e, c, !0);
            }),
            function () {
              return o.forEach(function (e) {
                return window.document.removeEventListener(e, c, !0);
              });
            }
          );
        }),
        t.createElement(
          n.Provider,
          {
            value: {
              subscribe: function (e) {
                return (
                  u.push(e),
                  function () {
                    return u.splice(u.indexOf(e), 1);
                  }
                );
              },
            },
          },
          i,
        )
      );
    }),
    (e.useEvent = function (e, r) {
      var o = t.useContext(n);
      if (!o)
        throw new Error(
          "react-dom-event: subscribe not found on context. You might be missing the EventProvider or have multiple instances of react-dom-event",
        );
      t.useEffect(function () {
        return o.subscribe(e);
      }, [o.subscribe, e].concat(r));
    }),
    Object.defineProperty(e, "__esModule", { value: !0 });
});
//# sourceMappingURL=react-dom-event.min.js.map
